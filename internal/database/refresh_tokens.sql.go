// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
SELECT user_id FROM refresh_tokens WHERE token = $1
`

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, token string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, token)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const refreshTokenExpired = `-- name: RefreshTokenExpired :one
SELECT (expires_at < NOW() OR revoked_at IS NOT NULL) FROM refresh_tokens WHERE token = $1
`

func (q *Queries) RefreshTokenExpired(ctx context.Context, token string) (sql.NullBool, error) {
	row := q.db.QueryRowContext(ctx, refreshTokenExpired, token)
	var column_1 sql.NullBool
	err := row.Scan(&column_1)
	return column_1, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens
SET updated_at = NOW(),
	revoked_at = NOW()
WHERE token = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, token)
	return err
}

const storeRefreshToken = `-- name: StoreRefreshToken :exec
INSERT INTO refresh_tokens(token, created_at, updated_at, user_id, expires_at)
VALUES(
	$1,
	NOW(),
	NOW(),
	$2,
	NOW() + INTERVAL '60 days'
)
`

type StoreRefreshTokenParams struct {
	Token  string
	UserID uuid.UUID
}

func (q *Queries) StoreRefreshToken(ctx context.Context, arg StoreRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, storeRefreshToken, arg.Token, arg.UserID)
	return err
}
